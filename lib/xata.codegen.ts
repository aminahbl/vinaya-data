// Generated by Xata Codegen 0.25.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "lookup_root_language",
    columns: [{ name: "language", type: "string" }],
    revLinks: [{ column: "rootLanguage", table: "rules" }],
  },
  {
    name: "lookup_tradition",
    columns: [{ name: "name", type: "string" }],
    revLinks: [{ column: "tradition", table: "rules" }],
  },
  {
    name: "lookup_rule_class",
    columns: [
      { name: "title", type: "string" },
      { name: "sortId", type: "int" },
    ],
    revLinks: [{ column: "class", table: "rules" }],
  },
  {
    name: "lookup_rule_set",
    columns: [{ name: "title", type: "string" }],
    revLinks: [{ column: "set", table: "rules" }],
  },
  {
    name: "lookup_translation_language",
    columns: [
      { name: "language", type: "string" },
      { name: "localName", type: "string" },
    ],
    revLinks: [{ column: "language", table: "rule_translations" }],
  },
  {
    name: "translators",
    columns: [
      { name: "name", type: "string" },
      { name: "displayName", type: "string" },
    ],
    revLinks: [{ column: "translator", table: "rule_translations" }],
  },
  {
    name: "rule_parallels",
    columns: [
      { name: "ruleId", type: "link", link: { table: "rules" } },
      { name: "parallelRuleId", type: "link", link: { table: "rules" } },
    ],
  },
  {
    name: "rule_translations",
    columns: [
      { name: "ruleId", type: "link", link: { table: "rules" } },
      {
        name: "language",
        type: "link",
        link: { table: "lookup_translation_language" },
      },
      { name: "translator", type: "link", link: { table: "translators" } },
      { name: "translation", type: "text" },
    ],
  },
  {
    name: "rules",
    columns: [
      {
        name: "rootLanguage",
        type: "link",
        link: { table: "lookup_root_language" },
      },
      { name: "tradition", type: "link", link: { table: "lookup_tradition" } },
      { name: "set", type: "link", link: { table: "lookup_rule_set" } },
      { name: "class", type: "link", link: { table: "lookup_rule_class" } },
      { name: "title", type: "string" },
      { name: "rule", type: "text" },
      { name: "imgId", type: "string" },
      { name: "nextRuleId", type: "link", link: { table: "rules" } },
      { name: "prevRuleId", type: "link", link: { table: "rules" } },
      { name: "crossSetRule", type: "link", link: { table: "rules" } },
    ],
    revLinks: [
      { column: "ruleId", table: "rule_parallels" },
      { column: "parallelRuleId", table: "rule_parallels" },
      { column: "ruleId", table: "rule_translations" },
      { column: "nextRuleId", table: "rules" },
      { column: "prevRuleId", table: "rules" },
      { column: "crossSetRule", table: "rules" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type LookupRootLanguage = InferredTypes["lookup_root_language"];
export type LookupRootLanguageRecord = LookupRootLanguage & XataRecord;

export type LookupTradition = InferredTypes["lookup_tradition"];
export type LookupTraditionRecord = LookupTradition & XataRecord;

export type LookupRuleClass = InferredTypes["lookup_rule_class"];
export type LookupRuleClassRecord = LookupRuleClass & XataRecord;

export type LookupRuleSet = InferredTypes["lookup_rule_set"];
export type LookupRuleSetRecord = LookupRuleSet & XataRecord;

export type LookupTranslationLanguage =
  InferredTypes["lookup_translation_language"];
export type LookupTranslationLanguageRecord = LookupTranslationLanguage &
  XataRecord;

export type Translators = InferredTypes["translators"];
export type TranslatorsRecord = Translators & XataRecord;

export type RuleParallels = InferredTypes["rule_parallels"];
export type RuleParallelsRecord = RuleParallels & XataRecord;

export type RuleTranslations = InferredTypes["rule_translations"];
export type RuleTranslationsRecord = RuleTranslations & XataRecord;

export type Rules = InferredTypes["rules"];
export type RulesRecord = Rules & XataRecord;

export type DatabaseSchema = {
  lookup_root_language: LookupRootLanguageRecord;
  lookup_tradition: LookupTraditionRecord;
  lookup_rule_class: LookupRuleClassRecord;
  lookup_rule_set: LookupRuleSetRecord;
  lookup_translation_language: LookupTranslationLanguageRecord;
  translators: TranslatorsRecord;
  rule_parallels: RuleParallelsRecord;
  rule_translations: RuleTranslationsRecord;
  rules: RulesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://owili-iodq2k.eu-central-1.xata.sh/db/vinaya",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
